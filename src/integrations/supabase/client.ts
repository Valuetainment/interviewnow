// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from './types';

// Environment detection
const isDevelopment = import.meta.env.DEV || false; // Check if in development mode, default to false
// const isDevelopment = true; // TEMPORARY: Force local development mode for testing

// Production credentials (remote Supabase) - hardcoded as constants
const REMOTE_SUPABASE_URL = "https://gypnutyegqxelvsqjedu.supabase.co";
const REMOTE_SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd5cG51dHllZ3F4ZWx2c3FqZWR1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NzQ1MTUsImV4cCI6MjA2MTQ1MDUxNX0.1GnoF-EZ5jr_DJgcgeCJcqy-NASlEFGt1XavwbiIELA";

// Local credentials
const LOCAL_SUPABASE_URL = "http://127.0.0.1:54321";
const LOCAL_SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0";

// Use local or remote credentials based on environment - with explicit fallback
const supabaseUrl = isDevelopment ? LOCAL_SUPABASE_URL : (REMOTE_SUPABASE_URL || "https://gypnutyegqxelvsqjedu.supabase.co");
const supabaseAnonKey = isDevelopment ? LOCAL_SUPABASE_KEY : (REMOTE_SUPABASE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd5cG51dHllZ3F4ZWx2c3FqZWR1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NzQ1MTUsImV4cCI6MjA2MTQ1MDUxNX0.1GnoF-EZ5jr_DJgcgeCJcqy-NASlEFGt1XavwbiIELA");

// Defensive check for production issues
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('[SUPABASE] Critical: Missing configuration', {
    url: supabaseUrl,
    hasKey: !!supabaseAnonKey,
    isDevelopment,
    env: import.meta.env
  });
  // This should never happen with hardcoded values, but helps debug
  throw new Error('Supabase configuration is missing. URL: ' + supabaseUrl);
}

console.log('[Supabase v2] Client initialized with:', { 
  url: supabaseUrl, 
  isDevelopment,
  timestamp: new Date().toISOString(),
  version: 'fix-55d433c'
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a singleton instance to avoid re-initialization issues
// Store on window object to survive module re-evaluations in production
const getSupabaseClient = () => {
  // Check if we already have an instance stored globally
  if (typeof window !== 'undefined' && (window as any).__supabaseClient) {
    return (window as any).__supabaseClient;
  }

  console.log('[SUPABASE] Creating new client instance with:', {
    url: supabaseUrl,
    hasKey: !!supabaseAnonKey
  });

  // Double-check values before creating client
  const finalUrl = supabaseUrl || "https://gypnutyegqxelvsqjedu.supabase.co";
  const finalKey = supabaseAnonKey || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd5cG51dHllZ3F4ZWx2c3FqZWR1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NzQ1MTUsImV4cCI6MjA2MTQ1MDUxNX0.1GnoF-EZ5jr_DJgcgeCJcqy-NASlEFGt1XavwbiIELA";

  const client = createClient<Database>(finalUrl, finalKey, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  });

  // Store instance globally
  if (typeof window !== 'undefined') {
    (window as any).__supabaseClient = client;
  }

  return client;
};

export const supabase = getSupabaseClient();

// Helper to get current tenant ID from auth context
export const getCurrentTenantId = async (): Promise<string | null> => {
  try {
    const { data } = await supabase.auth.getSession();
    const session = data?.session;

    if (!session?.user) {
      console.log('No active session found for tenant ID lookup');
      return null;
    }

    // Try multiple places where tenant_id might be stored
    // 1. Check JWT claims at top level (if JWT hook is configured)
    const jwtClaims = (session as { access_token?: string }).access_token ? 
      JSON.parse(atob((session as { access_token: string }).access_token.split('.')[1])) : {};
    
    if (jwtClaims.tenant_id) {
      console.log('Found tenant_id in JWT claims:', jwtClaims.tenant_id);
      return jwtClaims.tenant_id;
    }

    // 2. Check app_metadata (original location)
    const tenantId = session.user.app_metadata?.tenant_id || null;

    if (!tenantId) {
      // 3. If tenant_id is not in JWT or app_metadata, try to get it from the database
      try {
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('tenant_id')
          .eq('id', session.user.id)
          .single();

        if (!userError && userData?.tenant_id) {
          console.log('Found tenant_id in users table:', userData.tenant_id);
          return userData.tenant_id;
        }

        console.warn('No tenant_id found for user:', session.user.id);
        return null;
      } catch (dbError) {
        console.error('Error in tenant_id database lookup:', dbError);
        return null;
      }
    }

    return tenantId;
  } catch (error) {
    console.error('Error getting tenant ID:', error);
    return null;
  }
};

// Helper to create a path with tenant prefix for storage
export const getTenantStoragePath = async (
  bucket: 'resumes' | 'videos' | 'audio',
  fileName: string
): Promise<string | null> => {
  const tenantId = await getCurrentTenantId();
  
  if (!tenantId) {
    return null;
  }
  
  return `${tenantId}/${fileName}`;
};