// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from './types';

// Local Supabase credentials (for development)
// const isDevelopment = import.meta.env.DEV; // Check if in development mode
const isDevelopment = true; // TEMPORARY: Force local development mode for testing

// Production credentials (remote Supabase)
const REMOTE_SUPABASE_URL = "https://gypnutyegqxelvsqjedu.supabase.co";
const REMOTE_SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd5cG51dHllZ3F4ZWx2c3FqZWR1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NzQ1MTUsImV4cCI6MjA2MTQ1MDUxNX0.1GnoF-EZ5jr_DJgcgeCJcqy-NASlEFGt1XavwbiIELA";

// Local credentials
const LOCAL_SUPABASE_URL = "http://127.0.0.1:54321";
const LOCAL_SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0";

// Use local or remote credentials based on environment
const supabaseUrl = isDevelopment ? LOCAL_SUPABASE_URL : REMOTE_SUPABASE_URL;
const supabaseAnonKey = isDevelopment ? LOCAL_SUPABASE_KEY : REMOTE_SUPABASE_KEY;

console.log('Supabase client initialized with:', { 
  url: supabaseUrl, 
  isDevelopment 
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Helper to get current tenant ID from auth context
export const getCurrentTenantId = async (): Promise<string | null> => {
  const { data } = await supabase.auth.getSession();
  const session = data.session;
  
  if (!session?.user) {
    return null;
  }
  
  // Getting tenant_id from JWT claims
  const tenantId = session.user.app_metadata?.tenant_id || null;
  return tenantId;
};

// Helper to create a path with tenant prefix for storage
export const getTenantStoragePath = async (
  bucket: 'resumes' | 'videos' | 'audio',
  fileName: string
): Promise<string | null> => {
  const tenantId = await getCurrentTenantId();
  
  if (!tenantId) {
    return null;
  }
  
  return `${tenantId}/${fileName}`;
};