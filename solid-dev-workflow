# TriangularAI Development Workflow

## Overview

This document outlines the development workflow for the TriangularAI project, designed to keep local, production, and Supabase environments in sync while preventing code overwrites and environment mismatches.

## Basic Workflow

### 1. Branch-Based Development

Instead of working directly on the main branch:

1. **Create a feature branch** for each new feature or bug fix
   ```bash
   git checkout -b feature/new-feature
   ```

2. **Work on your changes** in this isolated branch
   ```bash
   # Make code changes
   # Create database migrations if needed
   ```

3. **Push your branch** to GitHub
   ```bash
   git push origin feature/new-feature
   ```

4. **Create a Pull Request (PR)** to merge your changes into main
   - This provides an opportunity for review
   - Keeps main branch stable

5. **Merge to main** after approval
   - Changes will automatically deploy to production

### 2. Automatic Environment Creation

The existing integrations will automatically:

1. **Supabase Preview Branch**: Created automatically when you push a branch that includes changes to Supabase files
   - Provides an isolated database environment for testing
   - Prevents changes from affecting production data

2. **Vercel Preview Deployment**: Created automatically when you push a branch
   - Allows testing frontend changes in an isolated environment
   - Each PR gets its own preview URL

### 3. Environment Switching

For local development with flexibility to test internet-connected features:

#### Option A: Simple Config Toggle

Create a simple toggle in your config file to switch between local and production/preview Supabase:

```typescript
// In src/config.ts
const useLocalSupabase = true; // Set to false when you need internet testing

export const supabaseConfig = {
  url: useLocalSupabase ? 'http://127.0.0.1:54321' : 'https://gypnutyegqxelvsqjedu.supabase.co',
  key: useLocalSupabase ? 'local-key' : 'production-key'
};
```

#### Option B: Environment Switching Script

The script below automates switching between different environments:

```bash
#!/bin/bash

# Supabase Environment Switching Script
# Usage: ./supabase-switch.sh [local|preview|prod] [branch-name]

ENV_TYPE=$1
BRANCH_NAME=$2
PROJECT_REF="gypnutyegqxelvsqjedu"  # Your Supabase project reference

# Config file paths
ENV_FILE=".env.local"
CONFIG_TS="src/config.ts"

switch_to_local() {
  echo "Switching to local Supabase environment..."
  
  # Start local Supabase if it's not running
  supabase status || supabase start
  
  # Update config file to use local URLs
  sed -i '' 's|const supabaseUrl = .*|const supabaseUrl = "http://127.0.0.1:54321";|' $CONFIG_TS
  sed -i '' 's|const supabaseKey = .*|const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9...";|' $CONFIG_TS
  
  echo "‚úÖ Now using local Supabase at http://127.0.0.1:54321"
  echo "üîç Studio available at http://127.0.0.1:54323"
}

switch_to_preview() {
  if [ -z "$BRANCH_NAME" ]; then
    echo "Error: Branch name is required for preview environment"
    echo "Usage: ./supabase-switch.sh preview [branch-name]"
    exit 1
  fi
  
  echo "Switching to preview branch: $BRANCH_NAME"
  
  # Create Git branch if it doesn't exist
  git checkout $BRANCH_NAME 2>/dev/null || git checkout -b $BRANCH_NAME
  
  # Link to Supabase preview branch
  supabase link --project-ref $PROJECT_REF --branch $BRANCH_NAME
  
  # Get Supabase preview URL and key
  PREVIEW_URL="https://$PROJECT_REF--$BRANCH_NAME.supabase.co"
  
  # Update config file to use preview URLs
  sed -i '' "s|const supabaseUrl = .*|const supabaseUrl = \"$PREVIEW_URL\";|" $CONFIG_TS
  sed -i '' 's|const supabaseKey = .*|const supabaseKey = "your-preview-anon-key";|' $CONFIG_TS
  
  echo "‚úÖ Now using Supabase preview branch at $PREVIEW_URL"
  echo "üåê Don't forget to push your Git branch to create the remote preview environment:"
  echo "   git push origin $BRANCH_NAME"
}

switch_to_prod() {
  echo "‚ö†Ô∏è Switching to production environment (READ-ONLY mode)"
  echo "‚ö†Ô∏è Be careful with any database operations in this mode!"
  
  # Update config file to use production URLs
  sed -i '' 's|const supabaseUrl = .*|const supabaseUrl = "https://gypnutyegqxelvsqjedu.supabase.co";|' $CONFIG_TS
  sed -i '' 's|const supabaseKey = .*|const supabaseKey = "your-production-anon-key";|' $CONFIG_TS
  
  echo "‚úÖ Now using production Supabase"
}

# Main switch statement
case $ENV_TYPE in
  local)
    switch_to_local
    ;;
  preview)
    switch_to_preview
    ;;
  prod)
    switch_to_prod
    ;;
  *)
    echo "Unknown environment type: $ENV_TYPE"
    echo "Usage: ./supabase-switch.sh [local|preview|prod] [branch-name]"
    exit 1
    ;;
esac

# Reminder about current environment
echo "------------------------------------"
echo "Current Supabase environment: $ENV_TYPE"
if [ "$ENV_TYPE" = "preview" ]; then
  echo "Branch: $BRANCH_NAME"
fi
echo "------------------------------------"
```

## Database Changes

When making database changes:

1. **Create migrations in your feature branch**
   ```bash
   supabase migration new add_new_column
   ```

2. **Edit the migration file** to make your database changes

3. **Apply migration to your current environment**
   ```bash
   supabase db push
   ```
   - If using local: Changes stay local
   - If linked to preview: Changes go to the preview branch
   - If linked to production (be careful!): Changes go to production

4. **Test thoroughly** before merging to main

## Practical Example Workflow

Here's a step-by-step example of how to work on a new feature:

1. **Start your day by pulling latest changes**
   ```bash
   git checkout main
   git pull
   ```

2. **Create a new branch for your work**
   ```bash
   git checkout -b feature/company-form-improvements
   ```

3. **Choose your development environment**
   - For non-internet requiring features: Use local Supabase
     ```bash
     ./supabase-switch.sh local
     ```
   - For features that need internet connectivity: Use preview branch
     ```bash
     ./supabase-switch.sh preview company-form-improvements
     ```

4. **Make code changes** in your preferred editor

5. **Make database changes** if needed
   ```bash
   supabase migration new add_company_fields
   # Edit the migration file
   supabase db push  # Applies to your current environment
   ```

6. **Test your changes** thoroughly
   - Local changes via http://localhost:3000
   - Preview branch via the Vercel preview URL

7. **Commit and push your changes**
   ```bash
   git add .
   git commit -m "Improve company form with better validation"
   git push origin feature/company-form-improvements
   ```

8. **Create a Pull Request** on GitHub
   - Ensure the PR title and description clearly explain your changes

9. **Request review** if working with others

10. **Merge to main** when ready
    - This will automatically deploy to production

## Benefits of This Workflow

- ‚úÖ **Safety**: Changes are isolated in branches until ready
- ‚úÖ **Flexibility**: Easy switching between local and remote environments
- ‚úÖ **Simplicity**: Leverages existing integrations
- ‚úÖ **Visibility**: Preview deployments for easy testing
- ‚úÖ **Reliability**: Consistent process for all changes

## Environment-Specific Notes

### Local Development
- Good for isolated development and initial testing
- Fast iterative development without internet dependency
- Accessible at http://localhost:3000 with Supabase at http://127.0.0.1:54321

### Preview Branches
- Good for testing features that require internet connectivity
- Isolated from production data
- Automatically created when pushing branches with Supabase changes

### Production
- Changes only reach production after PR approval and merge
- Protected by the branch-based workflow