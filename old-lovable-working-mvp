Interview Application: Hybrid PRD & Technical Document
1. System Overview
1.1 Purpose
This system is an AI-powered interview platform that enables organizations to conduct automated technical interviews, process resumes, and evaluate candidates based on position-specific competencies. The application streamlines the hiring process by allowing companies to define position requirements and automatically assess candidate qualifications.

1.2 Key Features
Resume processing and candidate profile creation
Company and position management with weighted competencies
AI-powered real-time interviewing using WebRTC
Transcript recording and analysis
Automated candidate assessment based on position requirements
Interview invitation system for remote candidate evaluation
2. Architecture
2.1 High-Level Architecture
The application follows a client-server architecture with React on the frontend and Supabase for backend services:

Frontend: React application with ShadCN UI components, deployed as a single-page application
Backend: Supabase for database, authentication, and serverless functions
Integration Services: OpenAI for AI interview and resume parsing, PDF.co for document processing, People Data Labs (PDL) for candidate enrichment
Real-time Communication: WebRTC for audio processing and communication with OpenAI's real-time API
2.2 Database Schema
Key tables in the Supabase database:

candidates: Stores candidate information parsed from resumes
candidate_profiles: Contains enriched data from PDL
positions: Stores job positions with requirements
companies: Stores company information used for interview context
competencies: Defines skills/abilities to assess
position_competencies: Maps competencies to positions with weights
interview_sessions: Tracks interview metadata
interview_results: Stores transcripts and evaluations
interview_invitations: Manages invitation links for candidates
transcript_entries: Stores individual utterances from interviews
candidate_assessments: Contains competency-based evaluations
2.3 System Components
UI Components: Modular React components for presentation
Custom Hooks: Business logic encapsulation for data operations
Edge Functions: Serverless functions for backend processes
Supabase Services: Database, storage, and authentication
3. Key Workflows
3.1 Resume Processing Flow
Upload Initiation:

User uploads PDF via ResumeUpload.tsx component
File is stored in Supabase Storage (bucket: 'resumes')
Text Extraction:

The process-resume edge function extracts text using PDF.co API
Extracted text is passed to the next step
AI Analysis:

parse-resume edge function sends text to OpenAI
AI structures the data into standardized fields (contact info, skills, experience, education)
Database Storage:

Candidate record created in candidates table
Resume URL and structured data stored
Profile Enrichment (optional):

enrich-candidate function calls PDL API
Additional candidate data stored in candidate_profiles table
Dependencies:

PDF.co API (requires API key in Supabase secrets)
OpenAI API (requires API key)
PDL API (optional, requires API key)
Supabase Storage
3.2 Position Creation Flow
Position Definition:

User creates position via NewPosition.tsx component
Basic details include title, level, company association
Competency Assignment:

User selects up to 5 competencies from predefined list
Assigns weights to each competency (must sum to 100%)
check_position_competency_weights() database function validates weights
Position Requirements:

User defines responsibilities, qualifications, and requirements
Data is stored in the positions table
Company Association:

User selects company via CompanySelect component
Creates relationship between position and company
Dependencies:

Competencies database table
Companies database table
3.3 Interview Flow
3.3.1 Direct Interview Flow
Setup:

User selects candidate and position
System creates interview session record
WebRTC Connection:

Frontend establishes connection with OpenAI via useWebRTC hook
Audio stream configured for bi-directional communication
Real-time Interview:

AI conducts interview based on position competencies
TranscriptRecorder captures conversation
useTranscriptCollection hook manages transcript data
Conversation Management:

WebRTC dataChannel transmits audio and receives transcribed text
useRealtimeInterview hook manages data flow
Transcript periodically saved via useTranscriptSave hook
Interview Completion:

User ends interview
finalizeTranscript function saves complete transcript
Session status updated to "completed"
3.3.2 Invitation-based Interview Flow
Invitation Creation:

Admin creates invitation via create-interview-invitation function
System generates secure token and interview session
Email sent to candidate with interview link
Invitation Validation:

Candidate clicks link, token validated via validate-interview-token function
System checks expiration and usage status
Interview Process:

Same WebRTC connection as direct flow
useInvitationTranscript hook updates invitation status
Completion:

Interview results saved
Invitation status updated to "completed"
3.4 Assessment Generation Flow
Assessment Initiation:

User requests assessment for an interview
useInterviewAssessment hook manages process
AI Analysis:

generate-candidate-assessment edge function retrieves:
Interview transcript
Position competencies and weights
Candidate and position details
OpenAI Processing:

Data formatted into prompt
OpenAI generates structured assessment with scores for each competency
Storage and Display:

Assessment saved in candidate_assessments table
evaluation_scores updated in interview_results table
Results displayed with weighted scores via visualization components
Summary Generation:

generate-interview-summary function creates text summary
Stored in interview_results table
4. Technical Components
4.1 Frontend Components
Core Components
RealtimeAIInterview.tsx: Manages the interview UI and audio interaction
TranscriptRecorder.tsx: Records and processes transcript data
CandidateList/Card.tsx: Displays candidate information
PositionList.tsx: Manages position display and filtering
CompetencyChart.tsx: Visualizes assessment results
UI Framework
ShadCN UI components for consistent styling
React Router for navigation
React Query for data fetching and caching
4.2 Custom Hooks
Interview Management
useWebRTCAudio.ts: Manages audio recording and processing
useRealtimeInterview.ts: Coordinates real-time interview flow
useTranscriptCollection.ts: Manages transcript data and persistence
useInterviewAssessment.ts: Handles assessment generation and retrieval
Data Management
usePositions.ts: Position data operations
useRecentInterviews.ts: Fetches recent interview data
4.3 Edge Functions
Resume Processing
process-resume: PDF text extraction via PDF.co
parse-resume: Resume analysis with OpenAI
enrich-candidate: Profile enrichment via PDL
Interview Management
create-realtime-session: Creates ephemeral keys for WebRTC
create-interview-invitation: Generates and sends interview invitations
validate-interview-token: Validates invitation tokens
update_invitation_status: Updates invitation status
Assessment Generation
generate-candidate-assessment: AI-based competency assessment
generate-interview-summary: Creates interview summary
4.4 API Dependencies
OpenAI API

Used for: Resume parsing, interview AI, assessment generation
Environment variables: OPENAI_API_KEY, OPENAI_RESUME_API_KEY
PDF.co API

Used for: PDF text extraction
Environment variable: PDF_CO_API_KEY
People Data Labs (PDL) API

Used for: Candidate profile enrichment
Environment variable: PDL_API_KEY
Resend API

Used for: Sending interview invitations
Environment variable: RESEND_API_KEY
4.5 WebRTC Implementation
The application implements WebRTC for real-time audio communication:

Connection Establishment:

useWebRTC.ts hook creates and manages RTCPeerConnection
Fetches ephemeral key from Supabase function
Establishes data channel and audio connection
Audio Processing:

Raw audio captured from user's microphone
Audio encoded and streamed to OpenAI API
Response audio streamed back and played to user
Transcript Processing:

Speech-to-text conversion by OpenAI
Text delta updates received via data channel
Updates processed and displayed in real-time
Disconnection:

Resources cleaned up on completion
Audio recording saved to Supabase Storage
5. Competency Weighting System
The position competency weighting system is a core feature:

Definition: Each position has up to 5 competencies with weights that sum to 100%

Storage: Weights stored in position_competencies table with database validation

Usage:

Interview Focus: AI prioritizes questions based on weights
Assessment Calculation: Weighted scoring formula (calculateWeightedScore)
Visualization: Weights displayed in UI components
AI Assessment: Weights included in prompts to OpenAI
Implementation:


// From assessment utils.ts
export const calculateWeightedScore = (scores: Record<string, any>, weights: Record<string, number>): number => {
  let totalWeightedScore = 0;
  let totalWeight = 0;

  for (const [competency, data] of Object.entries(scores)) {
    const score = data.score || 0;
    const weight = weights[competency] || data.weight || 10;
    
    totalWeightedScore += score * (weight / 100);
    totalWeight += weight;
  }

  if (totalWeight > 0 && totalWeight !== 100) {
    totalWeightedScore = (totalWeightedScore / totalWeight) * 100;
  }

  return Math.round(totalWeightedScore * 10) / 10;
};
6. Security and Data Management
6.1 Authentication
Simple password-based admin access
Token-based access for interview invitations
6.2 Data Storage
Candidate data in Supabase database
Resumes and audio recordings in Supabase Storage
Transcripts and assessments in structured database tables
6.3 API Security
API keys stored as Supabase secrets
Server-side API calls via Edge Functions
CORS headers for API security
7. Limitations and Considerations
7.1 Current Limitations
No multi-tenant architecture (single organization)
Limited user role management
Simple authentication mechanism
Audio processing relies on OpenAI's WebRTC implementation
7.2 Performance Considerations
WebRTC connections require robust error handling
Large transcripts require efficient storage and retrieval
Assessment generation is computationally intensive
8. Future Enhancement Opportunities
8.1 Architecture Improvements
Implement triangular architecture with central application server
Create multi-tenant data model with proper isolation
Enhance security with proper authentication and authorization
8.2 Feature Enhancements
Advanced analytics for interview performance
Integration with applicant tracking systems
Custom assessment models for specialized roles
Video interview capabilities
This document provides a comprehensive overview of the current interview application system, covering its architecture, workflows, technical components, and key features. It serves as both a product requirements document and technical specification for understanding and further developing the application.

